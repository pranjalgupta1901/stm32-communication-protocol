#include "stm32f407xx.h"
#include <stdint.h>
#define I2C1_BASE_ADDR    0x40005400UL
#define I2C2_BASE_ADDR    0x40005800UL
#define GPIOB_BASE_ADDR   0x40020400UL
#define GPIOA_BASE_ADDR   0x40020000UL
#define RCC_BASE_ADDR     0x40023800UL
#define RCC_APB1ENR_OFFSET  0x40UL
#define RCC_APB1ENR_ADDR   (RCC_BASE_ADDR + RCC_APB1ENR_OFFSET)
#define RCC_AHB1ENR_OFFSET  0x30UL
#define RCC_AHB1ENR_ADDR   (RCC_BASE_ADDR + RCC_AHB1ENR_OFFSET)




typedef struct
{
volatile uint32_t MODER;
volatile uint32_t OTYPER;
volatile uint32_t OSPEEDR;
volatile uint32_t PUPDR;
volatile uint32_t IDR;
volatile uint32_t ODR;
volatile uint32_t BSRR;
volatile uint32_t LCKR;
volatile uint32_t AFRL;
volatile uint32_t AFRH;
}GPIO_REGDEF_t;
 
 GPIO_REGDEF_t *pGPIOA = (GPIO_REGDEF_t*)GPIOA_BASE_ADDR;
 GPIO_REGDEF_t *pGPIOB = (GPIO_REGDEF_t*)GPIOB_BASE_ADDR;

 typedef struct
 {
 volatile uint32_t CR1;
 volatile uint32_t CR2;
 volatile uint32_t OAR1;
 volatile uint32_t OAR2;
 volatile uint32_t DR;
 volatile uint32_t SR1;
 volatile uint32_t SR2;
 volatile uint32_t CCR;
 volatile uint32_t TRISE;
 volatile uint32_t FLTR;
 }I2C_REGDEF_t;
 
 I2C_REGDEF_t *pI2C1 = (I2C_REGDEF_t*)I2C1_BASE_ADDR;
 I2C_REGDEF_t *pI2C2 = (I2C_REGDEF_t*)I2C2_BASE_ADDR;

int main(void)
{
	uint32_t *pAPB1ENR = (uint32_t*)RCC_APB1ENR_ADDR;
	uint32_t *pAHB1ENR = (uint32_t*)RCC_AHB1ENR_ADDR;

	*pAHB1ENR|=(1<<0);                             // GPIOA ENABLE
	*pAHB1ENR|=(1<<1);                             // GPIOB ENABLE
	*pAPB1ENR|=(1<<21)|(1<<22);                    // I2C1 and I2C2 ENABLE
   
	/* PIN CONFIGURATION*/
	//pGPIOA->MODER|=(1<<17);
	pGPIOB->MODER|=(1<<13)|(1<<19);                // SDA PB9 AND SCL PB6
	pGPIOB->OTYPER|=(1<<6)|(1<<9);                 // OPEN DRAIN PB6 AND PB9
  pGPIOB->PUPDR|=(1<<12)|(1<<18);                // INTERNAL PULL UP PB6 AND PB9
	pGPIOB->AFRL|=(1<<26);                         //AF4 PB6 SCL
	pGPIOB->AFRH|=(1<<6);                          //AF4 PB9 SDA
   //RCC->CFGR|=(1<<22);
	/* CONFIGURATION OF I2C REGISTERS*/
	
  pI2C1->CR2 |=(1<<4);										       // FREQ=16MHZ
	pI2C1->CCR |=80;										           // SCLK=100KHZ
	pI2C1->TRISE|=17;									             // TRISE=PCLK+1
	


	pI2C1->CR1|=(1<<0);                            // Peripheral enable
	pI2C1->CR1|=(1<<10);                           // Acknowledge enable
	
	
	/* START TRANSMISSION*/
	pI2C1->CR1|=(1<<8);                            // Start generation

  /* CHECKING FOR START BIT*/
	while(!((pI2C1->SR1) & (1<<0)));
  
	uint32_t dummyread3=pI2C1->SR1;
	
	//uint8_t SlaveAddr = 0x08;
//SlaveAddr= SlaveAddr<<1;
 //SlaveAddr&=~(1);
	pI2C1->DR=17;

	
	/* CHECK FOR ADDR FLAG*/
	while(!((pI2C1->SR1)& (1<<1)));
	
	/* CLEARING ADDR BIT */
	uint32_t dummyread=pI2C1->SR1;
	uint32_t dummyread1=pI2C1->SR2;
	
	/* WRITING DATA TO DATA REGISTER FOR USEFUL DATA TO BE SENT*/
	pI2C1->DR=0x50;
	
	
	while(1);
}
