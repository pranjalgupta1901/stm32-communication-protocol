#include <stdint.h>
#include <string.h>

#define USART1_BASE_ADDR  0x40011000UL
#define GPIOB_BASE_ADDR   0x40020400UL
#define GPIOA_BASE_ADDR   0x40020000UL
#define GPIOC_BASE_ADDR   0x40020800UL
#define GPIOD_BASE_ADDR   0x40020C00UL
#define RCC_BASE_ADDR     0x40023800UL
#define RCC_APB2ENR_OFFSET  0x44UL
#define RCC_APB2ENR_ADDR   (RCC_BASE_ADDR + RCC_APB2ENR_OFFSET)
#define RCC_AHB1ENR_OFFSET  0x30UL
#define RCC_AHB1ENR_ADDR   (RCC_BASE_ADDR + RCC_AHB1ENR_OFFSET)
#define delay for(int i=0;i<100000;i++);

typedef struct
{
volatile uint32_t MODER;
volatile uint32_t OTYPER;
volatile uint32_t OSPEEDR;
volatile uint32_t PUPDR;
volatile uint32_t IDR;
volatile uint32_t ODR;
volatile uint32_t BSRR;
volatile uint32_t LCKR;
volatile uint32_t AFRL;
volatile uint32_t AFRH;
}GPIO_REGDEF_t;

 GPIO_REGDEF_t *pGPIOA = (GPIO_REGDEF_t*)GPIOA_BASE_ADDR;
 GPIO_REGDEF_t *pGPIOB = (GPIO_REGDEF_t*)GPIOB_BASE_ADDR;
 GPIO_REGDEF_t *pGPIOC = (GPIO_REGDEF_t*)GPIOC_BASE_ADDR;
 GPIO_REGDEF_t *pGPIOD = (GPIO_REGDEF_t*)GPIOD_BASE_ADDR;


 typedef struct
 {
 volatile uint32_t SR;
 volatile uint32_t DR;
 volatile uint32_t BRR;
 volatile uint32_t CR1;
 volatile uint32_t CR2;
 volatile uint32_t CR3;
 volatile uint32_t GTPR;
 }USART_REGDEF_t;

 USART_REGDEF_t *pUSART1 = (USART_REGDEF_t*)USART1_BASE_ADDR;

 void USART_SENDDATA(USART_REGDEF_t *pUSART1, uint8_t *pTxBuffer, uint32_t Len)
 {
 	while(Len>0)
 	{
 		// wait until TXE is set

 		while(!(pUSART1->SR & (1<<7)));

 		pUSART1->DR=*((uint32_t*)pTxBuffer);

 		Len--;

        //Len--;

 		(uint8_t*)pTxBuffer++;

 		delay;
     }
 }

 void USART_RECIEVEDATA(USART_REGDEF_t *pUSART1, uint8_t *pRxBuffer, uint32_t Len)
 {

	 while(Len>0)
   {  // wait until RXNE is set

 	while(!(pUSART1->SR & (1<<5)));

 	*((uint32_t*)pRxBuffer)=pUSART1->DR;

 	Len--;

 	//Len--;

 	(uint8_t*)pRxBuffer++;

   }
 }

 uint8_t recieve;

 int main(void)
 {

 char data[] = "hello world";
 uint32_t *pAHB1ENR = (uint32_t*)RCC_AHB1ENR_ADDR;
 uint32_t *pAPB2ENR = (uint32_t*)RCC_APB2ENR_ADDR;

 *pAHB1ENR|=(1<<0);   // GPIOA CLOCK ENABLE
 *pAHB1ENR|=(1<<1);   // GPIOB CLOCK ENABLE
 *pAHB1ENR|=(1<<3)|(1<<2);   // GPIOD AND GPIOC CLOCK ENABLE
 *pAPB2ENR|=(1<<4);  // USART1 CLOCK ENABLE

 pGPIOB->MODER|=(1<<13)|(1<<15);  // PB6 - TX AND PB7 - RX AS ALTERNATE FUNCTION
 pGPIOD->MODER|=(1<<24);          // PD12 as output

 pGPIOB->AFRL|=(1<<26)|(1<<25)|(1<<24)|(1<<30)|(1<<29)|(1<<28);


 pUSART1->CR1|=(1<<13);  // USART ENABLE

// M BIT CONFIGURE AS 0 MEANS 1 START BIT AND 8 DATA BITS , N STOP BITS

 pUSART1->CR2|=(1<<13);   // STOP BITS AS 2

 pUSART1->BRR=0x683;       // 9600 bits per second as baud rate

while(1)
 {

	if((pGPIOA->IDR & (1<<0)))
  {

	pUSART1->CR1|=(1<<3);    // TRANSMITTER ENABLE
	pUSART1->CR1|=(1<<2);    // RECIEVER ENABLE

		//uint8_t send=0x01;


      //  uint8_t data = 1;

		 USART_SENDDATA(pUSART1,&data,11);

		 USART_RECIEVEDATA(pUSART1,&recieve,2);



		while(!(pUSART1->SR & (1<<6)));

       pUSART1->CR1&=~(1<<3);  //  TRANSMIITER disabled
       pUSART1->CR1&=~(1<<2);  //  RECIEVER disabled

      if(recieve-48)
      {
    	  pGPIOD->ODR|=(1<<12);
    	  delay;
    	  pGPIOD->ODR&=~(1<<12);
    	  delay;

      }

	}
   }
  }
